require:
  - rubocop-performance
  - rubocop-rails

AllCops:
  DisabledByDefault: true
  TargetRubyVersion: 2.6.5
  Exclude:
    - Gemfile
    - node_modules/**/*
    - bin/*
    - config/**/*
    - 'script/**/*'
    - 'vendor/**/*'
    - 'public/**/*'

# layout (https://docs.rubocop.org/rubocop/cops_layout.html)
Layout/MultilineMethodCallIndentation:
  EnforcedStyle: indented

# Align `when` with `case`.
Layout/CaseIndentation:
  Enabled: true

# Align comments with method definitions.
Layout/CommentIndentation:
  Enabled: true

Layout/ElseAlignment:
  Enabled: true

# Align `end` with the matching keyword or starting expression except for
# assignments, where it should be aligned with the LHS.
Layout/EndAlignment:
  Enabled: true
  EnforcedStyleAlignWith: variable
  AutoCorrect: true

Layout/EmptyLineAfterMagicComment:
  Enabled: true

Layout/EmptyLinesAroundAccessModifier:
  Enabled: true
  EnforcedStyle: only_before

Layout/EmptyLinesAroundBlockBody:
  Enabled: true

# In a regular class definition, no empty lines around the body.
Layout/EmptyLinesAroundClassBody:
  Enabled: true

# In a regular method definition, no empty lines around the body.
Layout/EmptyLinesAroundMethodBody:
  Enabled: true

# In a regular module definition, no empty lines around the body.
Layout/EmptyLinesAroundModuleBody:
  Enabled: true

# This cop checks if empty lines exist around the bodies of begin-end blocks.
Layout/EmptyLinesAroundModuleBody:
  Enabled: true

# Keep lines shorter than 128 characters.
Layout/LineLength:
  Max: 128

# Put a whitespace before `{` of brace blocks.
Layout/SpaceBeforeBlockBraces:
  EnforcedStyle: space

# For a brace block written in one line, put whitespace between `{`, `}` and the inner contents.
Layout/SpaceInsideBlockBraces:
  EnforcedStyle: space

# Do not put whitespace between method name and the parameter list.
Layout/SpaceAfterMethodName:
  Enabled: true

# Put whitespace around operators, except for `**`.
Layout/SpaceAroundOperators:
  Enabled: true
# Use the form of `{ key: value }`.  Put whitespace after `:`.
Layout/SpaceAfterColon:
  Enabled: true

# Put whitespaces between `{` and the first key, and between the last value and `}` when writing hash literals on a single line.
Layout/SpaceInsideHashLiteralBraces:
  EnforcedStyle: space
  Enabled: true

# Leave exactly one newline at the end of a file.
Layout/TrailingEmptyLines:
  EnforcedStyle: final_newline
  Enabled: true

# Do not put whitespace at the end of a line.
Layout/TrailingWhitespace:
  Enabled: true

# Use two spaces for 1-level of indent. Do not use the horizontal tab character.
Layout/IndentationStyle:
  EnforcedStyle: spaces
Layout/IndentationWidth:
  Enabled: true
Layout/IndentationConsistency:
  Enabled: true
Layout/InitialIndentation:
  Enabled: true
Layout/CommentIndentation:
  Enabled: true

Lint/MissingSuper:
  Enabled: false

# required cops from rubocop-performance gem 
Performance/FlatMap:
  Enabled: true

Performance/RedundantMerge:
  Enabled: true

Performance/StartWith:
  Enabled: true

Performance/EndWith:
  Enabled: true

Performance/RegexpMatch:
  Enabled: true

Performance/ReverseEach:
  Enabled: true

Performance/UnfreezeString:
  Enabled: true


# style (https://docs.rubocop.org/rubocop/cops_style.html)
Style/ParenthesesAroundCondition:
  Enabled: true

Style/RedundantBegin:
  Enabled: true

Style/RedundantReturn:
  Enabled: true
  AllowMultipleReturnValues: true

Style/Semicolon:
  Enabled: true
  AllowAsExpressionSeparator: true

# Prefer Foo.method over Foo::method
Style/ColonMethodCall:
  Enabled: true

Style/TrivialAccessors:
  Enabled: true

# Prefer &&/|| over and/or.
Style/AndOr:
  Enabled: true  
# Use quotes for string literals when they are enough.
Style/RedundantPercentQ:
  Enabled: true
# Do not introduce new global variables (`$foo`) for any reason.
Style/GlobalVars:
  Enabled: true
# Do not use class variables.  Use `class_attribute` instead.
Style/ClassVars:
  Enabled: true
# On method definition, do not omit parentheses of parameter list, except for methods without parameters.
Style/MethodDefParentheses:
  Enabled: true

# In definitions of class methods, use `self.` prefix of method name.
Style/ClassMethods:
  Enabled: true

# Use `attr_accessor`, `attr_reader`, and `attr_writer` to define accessors instead of `attr`.
Style/Attr:
  Enabled: true

# Use `alias_method` instead of `alias` to define aliases of methods.
Style/Alias:
  EnforcedStyle: prefer_alias_method

# Use `unless condition`, instead of `if !condition`.
Style/NegatedIf:
  Enabled: true

# Use `until condition`, instead of `while !condition`.
Style/NegatedWhile:
  Enabled: true

# Do not use `else` for `unless`.
Style/UnlessElse:
  Enabled: true

# Parallel assignments can only be used for assigning literal values or results of methods without arguments, and for exchanging two variables or attributes.
Style/ParallelAssignment:
  Enabled: true

# Do not nest conditional operators.
Style/NestedTernaryOperator:
  Enabled: true

# Do not write conditional operators over multiple lines.
Style/MultilineTernaryOperator:
  Enabled: true

# Do not write only `Object#to_s` in string interpolation, such as `"#{obj.to_s}"`.
Style/RedundantInterpolation:
  Enabled: true

# Use `''` to write empty strings.
Style/EmptyLiteral:
  Enabled: true

Style/FrozenStringLiteralComment:
  Enabled: false

Style/Documentation:
  Enabled: false

# metrics (https://docs.rubocop.org/rubocop/cops_metrics.html)
Metrics/AbcSize:
  Enabled: false

Metrics/BlockLength:
  Enabled: false

Metrics/ClassLength:
  Enabled: false
  
Metrics/MethodLength:
  Enabled: false